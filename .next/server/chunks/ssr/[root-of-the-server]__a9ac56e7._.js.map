{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/abdulaziz/proyekt/GFS/components/ui/color-mode.tsx"],"sourcesContent":["\"use client\"\n\nimport type { IconButtonProps, SpanProps } from \"@chakra-ui/react\"\nimport { ClientOnly, IconButton, Skeleton, Span } from \"@chakra-ui/react\"\nimport { ThemeProvider, useTheme } from \"next-themes\"\nimport type { ThemeProviderProps } from \"next-themes\"\nimport * as React from \"react\"\nimport { LuMoon, LuSun } from \"react-icons/lu\"\n\nexport interface ColorModeProviderProps extends ThemeProviderProps {\n  children?: React.ReactNode\n}\n\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  return (\n    <ThemeProvider attribute=\"class\" disableTransitionOnChange {...props} />\n  )\n}\n\nexport type ColorMode = \"light\" | \"dark\"\n\nexport interface UseColorModeReturn {\n  colorMode: ColorMode\n  setColorMode: (colorMode: ColorMode) => void\n  toggleColorMode: () => void\n}\n\nexport function useColorMode(): UseColorModeReturn {\n  const { resolvedTheme, setTheme, forcedTheme } = useTheme()\n  const colorMode = forcedTheme || resolvedTheme\n  const toggleColorMode = () => {\n    setTheme(resolvedTheme === \"dark\" ? \"light\" : \"dark\")\n  }\n  return {\n    colorMode: colorMode as ColorMode,\n    setColorMode: setTheme,\n    toggleColorMode,\n  }\n}\n\nexport function useColorModeValue<T>(light: T, dark: T) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n\nexport function ColorModeIcon() {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? <LuMoon /> : <LuSun />\n}\n\ninterface ColorModeButtonProps extends Omit<IconButtonProps, \"aria-label\"> {\n  \"aria-label\"?: string\n  ref?: React.Ref<HTMLButtonElement>\n}\n\nexport const ColorModeButton = React.forwardRef<\n  HTMLButtonElement,\n  ColorModeButtonProps\n>(function ColorModeButton(props, ref) {\n  const { toggleColorMode } = useColorMode()\n  return (\n    <ClientOnly fallback={<Skeleton boxSize=\"8\" />}>\n      <IconButton\n        onClick={toggleColorMode}\n        variant=\"ghost\"\n        aria-label=\"Toggle color mode\"\n        size=\"sm\"\n        ref={ref}\n        {...props}\n        css={{\n          _icon: {\n            width: \"5\",\n            height: \"5\",\n          },\n        }}\n      >\n        <ColorModeIcon />\n      </IconButton>\n    </ClientOnly>\n  )\n})\n\nexport const LightMode = React.forwardRef<HTMLSpanElement, SpanProps>(\n  function LightMode(props, ref) {\n    return (\n      <Span\n        color=\"fg\"\n        display=\"contents\"\n        className=\"chakra-theme light\"\n        colorPalette=\"gray\"\n        colorScheme=\"light\"\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\n\nexport const DarkMode = React.forwardRef<HTMLSpanElement, SpanProps>(\n  function DarkMode(props, ref) {\n    return (\n      <Span\n        color=\"fg\"\n        display=\"contents\"\n        className=\"chakra-theme dark\"\n        colorPalette=\"gray\"\n        colorScheme=\"dark\"\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\n"],"names":[],"mappings":";;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAPA;;;;;;AAaO,SAAS,kBAAkB,KAA6B;IAC7D,qBACE,8OAAC,gJAAA,CAAA,gBAAa;QAAC,WAAU;QAAQ,yBAAyB;QAAE,GAAG,KAAK;;;;;;AAExE;AAUO,SAAS;IACd,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,gJAAA,CAAA,WAAQ,AAAD;IACxD,MAAM,YAAY,eAAe;IACjC,MAAM,kBAAkB;QACtB,SAAS,kBAAkB,SAAS,UAAU;IAChD;IACA,OAAO;QACL,WAAW;QACX,cAAc;QACd;IACF;AACF;AAEO,SAAS,kBAAqB,KAAQ,EAAE,IAAO;IACpD,MAAM,EAAE,SAAS,EAAE,GAAG;IACtB,OAAO,cAAc,SAAS,OAAO;AACvC;AAEO,SAAS;IACd,MAAM,EAAE,SAAS,EAAE,GAAG;IACtB,OAAO,cAAc,uBAAS,8OAAC,8IAAA,CAAA,SAAM;;;;6BAAM,8OAAC,8IAAA,CAAA,QAAK;;;;;AACnD;AAOO,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG5C,SAAS,gBAAgB,KAAK,EAAE,GAAG;IACnC,MAAM,EAAE,eAAe,EAAE,GAAG;IAC5B,qBACE,8OAAC,wMAAA,CAAA,aAAU;QAAC,wBAAU,8OAAC,4LAAA,CAAA,WAAQ;YAAC,SAAQ;;;;;;kBACtC,cAAA,8OAAC,gMAAA,CAAA,aAAU;YACT,SAAS;YACT,SAAQ;YACR,cAAW;YACX,MAAK;YACL,KAAK;YACJ,GAAG,KAAK;YACT,KAAK;gBACH,OAAO;oBACL,OAAO;oBACP,QAAQ;gBACV;YACF;sBAEA,cAAA,8OAAC;;;;;;;;;;;;;;;AAIT;AAEO,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EACtC,SAAS,UAAU,KAAK,EAAE,GAAG;IAC3B,qBACE,8OAAC,mLAAA,CAAA,OAAI;QACH,OAAM;QACN,SAAQ;QACR,WAAU;QACV,cAAa;QACb,aAAY;QACZ,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAGK,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EACrC,SAAS,SAAS,KAAK,EAAE,GAAG;IAC1B,qBACE,8OAAC,mLAAA,CAAA,OAAI;QACH,OAAM;QACN,SAAQ;QACR,WAAU;QACV,cAAa;QACb,aAAY;QACZ,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///Users/abdulaziz/proyekt/GFS/components/ui/provider.tsx"],"sourcesContent":["'use client';\n\nimport {\n  ChakraProvider,\n  createSystem,\n  defaultConfig,\n  defineConfig,\n} from '@chakra-ui/react';\nimport { ColorModeProvider, type ColorModeProviderProps } from './color-mode';\n\nconst config = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        primary: {\n          DEFAULT: { value: '#183B89' },\n          100: { value: '#FEECED' },\n          700: { value: '#FF0010' },\n        },\n        red: {\n          DEFAULT: { value: '#EB3337' },\n          100: { value: '#FEECED' },\n          700: { value: '#FF0010' },\n        },\n        dark: {\n          DEFAULT: { value: '#000000' },\n          100: { value: '#1C1B1B' },\n        },\n        light: {\n          DEFAULT: { value: '#ffffff' },\n          100: { value: '#F1F1F1' },\n          200: { value: '#faf7f7' },\n          300: { value: '#F3F3F3' },\n          400: { value: '#EDEDED' },\n          500: { value: '#F3F4F9' },\n        },\n        gray: {\n          DEFAULT: { value: 'gray' },\n          100: { value: '#F6F6F6' },\n        },\n      },\n    },\n  },\n  globalCss: {\n    ':root': {\n      '--primary-color': '#183B89',\n      '--red-color': '#EB3337',\n      '--rate-color': '#FFB338',\n      '--gray-color-300': '#F3F3F3',\n      '--gray-color-400': '#EDEDED',\n      '--gray-color-500': '#CDCDCD',\n      '--gray-color-600': '#676767',\n      '--gray-color-700': '#667085',\n      '--gray-color-800': '#475467',\n    },\n  },\n});\n\nconst system = createSystem(defaultConfig, config);\n\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider forcedTheme='light' {...props} />\n    </ChakraProvider>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAAA;AAAA;AAMA;AARA;;;;AAUA,MAAM,SAAS,CAAA,GAAA,oLAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,OAAO;QACL,QAAQ;YACN,QAAQ;gBACN,SAAS;oBACP,SAAS;wBAAE,OAAO;oBAAU;oBAC5B,KAAK;wBAAE,OAAO;oBAAU;oBACxB,KAAK;wBAAE,OAAO;oBAAU;gBAC1B;gBACA,KAAK;oBACH,SAAS;wBAAE,OAAO;oBAAU;oBAC5B,KAAK;wBAAE,OAAO;oBAAU;oBACxB,KAAK;wBAAE,OAAO;oBAAU;gBAC1B;gBACA,MAAM;oBACJ,SAAS;wBAAE,OAAO;oBAAU;oBAC5B,KAAK;wBAAE,OAAO;oBAAU;gBAC1B;gBACA,OAAO;oBACL,SAAS;wBAAE,OAAO;oBAAU;oBAC5B,KAAK;wBAAE,OAAO;oBAAU;oBACxB,KAAK;wBAAE,OAAO;oBAAU;oBACxB,KAAK;wBAAE,OAAO;oBAAU;oBACxB,KAAK;wBAAE,OAAO;oBAAU;oBACxB,KAAK;wBAAE,OAAO;oBAAU;gBAC1B;gBACA,MAAM;oBACJ,SAAS;wBAAE,OAAO;oBAAO;oBACzB,KAAK;wBAAE,OAAO;oBAAU;gBAC1B;YACF;QACF;IACF;IACA,WAAW;QACT,SAAS;YACP,mBAAmB;YACnB,eAAe;YACf,gBAAgB;YAChB,oBAAoB;YACpB,oBAAoB;YACpB,oBAAoB;YACpB,oBAAoB;YACpB,oBAAoB;YACpB,oBAAoB;QACtB;IACF;AACF;AAEA,MAAM,SAAS,CAAA,GAAA,oLAAA,CAAA,eAAY,AAAD,EAAE,gKAAA,CAAA,gBAAa,EAAE;AAEpC,SAAS,SAAS,KAA6B;IACpD,qBACE,8OAAC,sLAAA,CAAA,iBAAc;QAAC,OAAO;kBACrB,cAAA,8OAAC,kIAAA,CAAA,oBAAiB;YAAC,aAAY;YAAS,GAAG,KAAK;;;;;;;;;;;AAGtD","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/abdulaziz/proyekt/GFS/components/layout/header/_components/mobile-nav/index.tsx"],"sourcesContent":["'use client';\r\n\r\nimport {\r\n  IconButton,\r\n  Drawer,\r\n  Portal,\r\n  CloseButton,\r\n  Image,\r\n  Text,\r\n  Stack,\r\n  Link,\r\n  HStack,\r\n} from '@chakra-ui/react';\r\nimport { useState } from 'react';\r\nimport { CiMenuBurger } from 'react-icons/ci';\r\nimport { IoClose } from 'react-icons/io5';\r\n\r\nfunction MobileNav() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Drawer.Root\r\n        placement={'top'}\r\n        open={isOpen}\r\n        onOpenChange={(e) => setIsOpen(e.open)}\r\n      >\r\n        <Drawer.Trigger asChild>\r\n          <IconButton\r\n            aria-label='Open navigation'\r\n            display={{ base: 'flex', lg: 'none' }}\r\n            onClick={() => setIsOpen(true)}\r\n            variant='ghost'\r\n            size='md'\r\n            rounded={12}\r\n          >\r\n            <CiMenuBurger />\r\n          </IconButton>\r\n        </Drawer.Trigger>\r\n        <Portal>\r\n          <Drawer.Backdrop />\r\n          <Drawer.Positioner>\r\n            <Drawer.Content roundedBottom={'30px'}>\r\n              <Drawer.Header px={4} height={'64px'}>\r\n                <HStack w={'full'} justifyContent={'space-between'}>\r\n                  <Link href='/'>\r\n                    <Image\r\n                      height={{ base: '31px', md: '73px' }}\r\n                      width={{ base: '78px', md: '177px' }}\r\n                      src={'/icons/logo.svg'}\r\n                      alt='logo'\r\n                    />\r\n                  </Link>{' '}\r\n                  <IconButton\r\n                    onClick={() => setIsOpen(false)}\r\n                    variant={'plain'}\r\n                  >\r\n                    <IoClose size={24} color='#EB3337' />\r\n                  </IconButton>\r\n                </HStack>\r\n              </Drawer.Header>\r\n              <Drawer.Body px={'30px'}>\r\n                <Text fontSize={13} color={'primary'} fontWeight={700}>\r\n                  Main menu\r\n                </Text>\r\n                <Stack mt={6} gap={4} pb={6} color={'primary'}>\r\n                  <Link _hover={{ color: 'red' }}>Why us</Link>\r\n                  <Link _hover={{ color: 'red' }}>Partners</Link>\r\n                  <Link _hover={{ color: 'red' }}>Reviews</Link>\r\n                  <Link _hover={{ color: 'red' }}>Contact</Link>\r\n                </Stack>\r\n              </Drawer.Body>\r\n            </Drawer.Content>\r\n          </Drawer.Positioner>\r\n        </Portal>\r\n      </Drawer.Root>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MobileNav;\r\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAfA;;;;;;AAiBA,SAAS;IACP,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAErC,qBACE;kBACE,cAAA,8OAAC,6NAAA,CAAA,SAAM,CAAC,IAAI;YACV,WAAW;YACX,MAAM;YACN,cAAc,CAAC,IAAM,UAAU,EAAE,IAAI;;8BAErC,8OAAC,6NAAA,CAAA,SAAM,CAAC,OAAO;oBAAC,OAAO;8BACrB,cAAA,8OAAC,gMAAA,CAAA,aAAU;wBACT,cAAW;wBACX,SAAS;4BAAE,MAAM;4BAAQ,IAAI;wBAAO;wBACpC,SAAS,IAAM,UAAU;wBACzB,SAAQ;wBACR,MAAK;wBACL,SAAS;kCAET,cAAA,8OAAC,8IAAA,CAAA,eAAY;;;;;;;;;;;;;;;8BAGjB,8OAAC,8KAAA,CAAA,SAAM;;sCACL,8OAAC,6NAAA,CAAA,SAAM,CAAC,QAAQ;;;;;sCAChB,8OAAC,6NAAA,CAAA,SAAM,CAAC,UAAU;sCAChB,cAAA,8OAAC,6NAAA,CAAA,SAAM,CAAC,OAAO;gCAAC,eAAe;;kDAC7B,8OAAC,6NAAA,CAAA,SAAM,CAAC,MAAM;wCAAC,IAAI;wCAAG,QAAQ;kDAC5B,cAAA,8OAAC,2LAAA,CAAA,SAAM;4CAAC,GAAG;4CAAQ,gBAAgB;;8DACjC,8OAAC,oLAAA,CAAA,OAAI;oDAAC,MAAK;8DACT,cAAA,8OAAC,sLAAA,CAAA,QAAK;wDACJ,QAAQ;4DAAE,MAAM;4DAAQ,IAAI;wDAAO;wDACnC,OAAO;4DAAE,MAAM;4DAAQ,IAAI;wDAAQ;wDACnC,KAAK;wDACL,KAAI;;;;;;;;;;;gDAEA;8DACR,8OAAC,gMAAA,CAAA,aAAU;oDACT,SAAS,IAAM,UAAU;oDACzB,SAAS;8DAET,cAAA,8OAAC,+IAAA,CAAA,UAAO;wDAAC,MAAM;wDAAI,OAAM;;;;;;;;;;;;;;;;;;;;;;kDAI/B,8OAAC,6NAAA,CAAA,SAAM,CAAC,IAAI;wCAAC,IAAI;;0DACf,8OAAC,0LAAA,CAAA,OAAI;gDAAC,UAAU;gDAAI,OAAO;gDAAW,YAAY;0DAAK;;;;;;0DAGvD,8OAAC,sLAAA,CAAA,QAAK;gDAAC,IAAI;gDAAG,KAAK;gDAAG,IAAI;gDAAG,OAAO;;kEAClC,8OAAC,oLAAA,CAAA,OAAI;wDAAC,QAAQ;4DAAE,OAAO;wDAAM;kEAAG;;;;;;kEAChC,8OAAC,oLAAA,CAAA,OAAI;wDAAC,QAAQ;4DAAE,OAAO;wDAAM;kEAAG;;;;;;kEAChC,8OAAC,oLAAA,CAAA,OAAI;wDAAC,QAAQ;4DAAE,OAAO;wDAAM;kEAAG;;;;;;kEAChC,8OAAC,oLAAA,CAAA,OAAI;wDAAC,QAAQ;4DAAE,OAAO;wDAAM;kEAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASlD;uCAEe","debugId":null}}]
}